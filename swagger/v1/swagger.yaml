---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/employees":
    get:
      summary: list employees
      responses:
        '200':
          description: successful
    post:
      summary: create employee
      responses:
        '200':
          description: successful
  "/api/v1/employees/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show employee
      responses:
        '200':
          description: successful
    patch:
      summary: update employee
      responses:
        '200':
          description: successful
    put:
      summary: update employee
      responses:
        '200':
          description: successful
    delete:
      summary: delete employee
      responses:
        '200':
          description: successful
  "/api/v1/jobs":
    get:
      summary: list jobs
      responses:
        '200':
          description: successful
  "/api/v1/jobs/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show job
      responses:
        '200':
          description: successful
  "/api/v1/teams":
    get:
      summary: list teams
      responses:
        '200':
          description: successful
    post:
      summary: create team
      responses:
        '200':
          description: successful
  "/api/v1/teams/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show team
      responses:
        '200':
          description: successful
    patch:
      summary: update team
      responses:
        '200':
          description: successful
    put:
      summary: update team
      responses:
        '200':
          description: successful
    delete:
      summary: delete team
      responses:
        '200':
          description: successful
  "/api/v1/users/login":
    post:
      summary: login user
      tags:
      - Users
      description: Logs in a user
      parameters: []
      responses:
        '200':
          description: success
        '401':
          description: 'Error: Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/login_user"
  "/api/v1/users/logout":
    delete:
      summary: logout user
      tags:
      - Users
      description: Logs out a user
      security:
      - bearer_auth: []
      responses:
        '200':
          description: logged out user
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/logout_user"
        '401':
          description: authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_credentials"
  "/api/v1/users/me":
    get:
      summary: me user
      tags:
      - Users
      description: Display the current user
      security:
      - bearer_auth: []
      responses:
        '200':
          description: user profile
          content:
            application/json:
              schema:
                example:
                  payload:
                    id: 84384
                    email: darrick_weimann@gleichner.info
                    first_name: Flossie
                    last_name: Rath
                    name: Flossie Rath
                    username: 
                  status: 200
        '401':
          description: authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/bad_credentials"
  "/api/v1/users/create":
    post:
      summary: create user
      tags:
      - Users
      description: Create a new user
      parameters: []
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                example:
                  success: true
                  payload:
                    id: 84384
                    email: darrick_weimann@gleichner.info
                    first_name: Flossie
                    last_name: Rath
                    name: Flossie Rath
                    phone: '5857394188'
                    username: 
                  status: 201
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error_saving_user"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/create_user"
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
